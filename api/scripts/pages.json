[{"name":"abstract class LiveAction<State> : Action<State> ","description":"se.gustavkarlsson.conveyor.actions.LiveAction","location":"core/core/se.gustavkarlsson.conveyor.actions/-live-action/index.html","searchKeys":["LiveAction","abstract class LiveAction<State> : Action<State> ","se.gustavkarlsson.conveyor.actions.LiveAction"]},{"name":"abstract class WatchAction<State> : Action<State> ","description":"se.gustavkarlsson.conveyor.actions.WatchAction","location":"core/core/se.gustavkarlsson.conveyor.actions/-watch-action/index.html","searchKeys":["WatchAction","abstract class WatchAction<State> : Action<State> ","se.gustavkarlsson.conveyor.actions.WatchAction"]},{"name":"abstract fun issue(action: Action<State>)","description":"se.gustavkarlsson.conveyor.ActionIssuer.issue","location":"core/core/se.gustavkarlsson.conveyor/-action-issuer/issue.html","searchKeys":["issue","abstract fun issue(action: Action<State>)","se.gustavkarlsson.conveyor.ActionIssuer.issue"]},{"name":"abstract fun start(scope: CoroutineScope): Job","description":"se.gustavkarlsson.conveyor.Store.start","location":"core/core/se.gustavkarlsson.conveyor/-store/start.html","searchKeys":["start","abstract fun start(scope: CoroutineScope): Job","se.gustavkarlsson.conveyor.Store.start"]},{"name":"abstract suspend fun execute(stateFlow: AtomicStateFlow<State>)","description":"se.gustavkarlsson.conveyor.Action.execute","location":"core/core/se.gustavkarlsson.conveyor/-action/execute.html","searchKeys":["execute","abstract suspend fun execute(stateFlow: AtomicStateFlow<State>)","se.gustavkarlsson.conveyor.Action.execute"]},{"name":"abstract suspend fun update(block: State.() -> State): State","description":"se.gustavkarlsson.conveyor.AtomicStateFlow.update","location":"core/core/se.gustavkarlsson.conveyor/-atomic-state-flow/update.html","searchKeys":["update","abstract suspend fun update(block: State.() -> State): State","se.gustavkarlsson.conveyor.AtomicStateFlow.update"]},{"name":"abstract val job: Job?","description":"se.gustavkarlsson.conveyor.Store.job","location":"core/core/se.gustavkarlsson.conveyor/-store/job.html","searchKeys":["job","abstract val job: Job?","se.gustavkarlsson.conveyor.Store.job"]},{"name":"abstract val state: StateFlow<State>","description":"se.gustavkarlsson.conveyor.Store.state","location":"core/core/se.gustavkarlsson.conveyor/-store/state.html","searchKeys":["state","abstract val state: StateFlow<State>","se.gustavkarlsson.conveyor.Store.state"]},{"name":"abstract val storeSubscriberCount: StateFlow<Int>","description":"se.gustavkarlsson.conveyor.AtomicStateFlow.storeSubscriberCount","location":"core/core/se.gustavkarlsson.conveyor/-atomic-state-flow/store-subscriber-count.html","searchKeys":["storeSubscriberCount","abstract val storeSubscriberCount: StateFlow<Int>","se.gustavkarlsson.conveyor.AtomicStateFlow.storeSubscriberCount"]},{"name":"annotation class InternalConveyorApi","description":"se.gustavkarlsson.conveyor.InternalConveyorApi","location":"core/core/se.gustavkarlsson.conveyor/-internal-conveyor-api/index.html","searchKeys":["InternalConveyorApi","annotation class InternalConveyorApi","se.gustavkarlsson.conveyor.InternalConveyorApi"]},{"name":"class StatefulMutableSharedFlow<T> : MutableSharedFlow<T> , StateFlow<T> ","description":"se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow","location":"core/core/se.gustavkarlsson.conveyor.internal/-stateful-mutable-shared-flow/index.html","searchKeys":["StatefulMutableSharedFlow","class StatefulMutableSharedFlow<T> : MutableSharedFlow<T> , StateFlow<T> ","se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow"]},{"name":"class StoreAlreadyStartedException : IllegalStateException","description":"se.gustavkarlsson.conveyor.StoreAlreadyStartedException","location":"core/core/se.gustavkarlsson.conveyor/-store-already-started-exception/index.html","searchKeys":["StoreAlreadyStartedException","class StoreAlreadyStartedException : IllegalStateException","se.gustavkarlsson.conveyor.StoreAlreadyStartedException"]},{"name":"class StoreNotYetStartedException : IllegalStateException","description":"se.gustavkarlsson.conveyor.StoreNotYetStartedException","location":"core/core/se.gustavkarlsson.conveyor/-store-not-yet-started-exception/index.html","searchKeys":["StoreNotYetStartedException","class StoreNotYetStartedException : IllegalStateException","se.gustavkarlsson.conveyor.StoreNotYetStartedException"]},{"name":"class StoreStoppedException(cancellationReason: Throwable?) : IllegalStateException","description":"se.gustavkarlsson.conveyor.StoreStoppedException","location":"core/core/se.gustavkarlsson.conveyor/-store-stopped-exception/index.html","searchKeys":["StoreStoppedException","class StoreStoppedException(cancellationReason: Throwable?) : IllegalStateException","se.gustavkarlsson.conveyor.StoreStoppedException"]},{"name":"fun <State> Action(block: suspend (stateFlow: AtomicStateFlow<State>) -> Unit): Action<State>","description":"se.gustavkarlsson.conveyor.Action","location":"core/core/se.gustavkarlsson.conveyor/-action.html","searchKeys":["Action","fun <State> Action(block: suspend (stateFlow: AtomicStateFlow<State>) -> Unit): Action<State>","se.gustavkarlsson.conveyor.Action"]},{"name":"fun <State> ActionIssuer<State>.issue(block: suspend (stateFlow: AtomicStateFlow<State>) -> Unit)","description":"se.gustavkarlsson.conveyor.issue","location":"core/core/se.gustavkarlsson.conveyor/issue.html","searchKeys":["issue","fun <State> ActionIssuer<State>.issue(block: suspend (stateFlow: AtomicStateFlow<State>) -> Unit)","se.gustavkarlsson.conveyor.issue"]},{"name":"fun <State> Store(initialState: State, startActions: Iterable<Action<State>> = emptyList(), plugins: Iterable<Plugin<State>> = emptyList()): Store<State>","description":"se.gustavkarlsson.conveyor.Store","location":"core/core/se.gustavkarlsson.conveyor/-store.html","searchKeys":["Store","fun <State> Store(initialState: State, startActions: Iterable<Action<State>> = emptyList(), plugins: Iterable<Plugin<State>> = emptyList()): Store<State>","se.gustavkarlsson.conveyor.Store"]},{"name":"fun <T> StatefulMutableSharedFlow(initialValue: T)","description":"se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.StatefulMutableSharedFlow","location":"core/core/se.gustavkarlsson.conveyor.internal/-stateful-mutable-shared-flow/-stateful-mutable-shared-flow.html","searchKeys":["StatefulMutableSharedFlow","fun <T> StatefulMutableSharedFlow(initialValue: T)","se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.StatefulMutableSharedFlow"]},{"name":"fun InternalConveyorApi()","description":"se.gustavkarlsson.conveyor.InternalConveyorApi.InternalConveyorApi","location":"core/core/se.gustavkarlsson.conveyor/-internal-conveyor-api/-internal-conveyor-api.html","searchKeys":["InternalConveyorApi","fun InternalConveyorApi()","se.gustavkarlsson.conveyor.InternalConveyorApi.InternalConveyorApi"]},{"name":"fun LiveAction()","description":"se.gustavkarlsson.conveyor.actions.LiveAction.LiveAction","location":"core/core/se.gustavkarlsson.conveyor.actions/-live-action/-live-action.html","searchKeys":["LiveAction","fun LiveAction()","se.gustavkarlsson.conveyor.actions.LiveAction.LiveAction"]},{"name":"fun StoreAlreadyStartedException()","description":"se.gustavkarlsson.conveyor.StoreAlreadyStartedException.StoreAlreadyStartedException","location":"core/core/se.gustavkarlsson.conveyor/-store-already-started-exception/-store-already-started-exception.html","searchKeys":["StoreAlreadyStartedException","fun StoreAlreadyStartedException()","se.gustavkarlsson.conveyor.StoreAlreadyStartedException.StoreAlreadyStartedException"]},{"name":"fun StoreNotYetStartedException()","description":"se.gustavkarlsson.conveyor.StoreNotYetStartedException.StoreNotYetStartedException","location":"core/core/se.gustavkarlsson.conveyor/-store-not-yet-started-exception/-store-not-yet-started-exception.html","searchKeys":["StoreNotYetStartedException","fun StoreNotYetStartedException()","se.gustavkarlsson.conveyor.StoreNotYetStartedException.StoreNotYetStartedException"]},{"name":"fun StoreStoppedException(cancellationReason: Throwable?)","description":"se.gustavkarlsson.conveyor.StoreStoppedException.StoreStoppedException","location":"core/core/se.gustavkarlsson.conveyor/-store-stopped-exception/-store-stopped-exception.html","searchKeys":["StoreStoppedException","fun StoreStoppedException(cancellationReason: Throwable?)","se.gustavkarlsson.conveyor.StoreStoppedException.StoreStoppedException"]},{"name":"fun WatchAction()","description":"se.gustavkarlsson.conveyor.actions.WatchAction.WatchAction","location":"core/core/se.gustavkarlsson.conveyor.actions/-watch-action/-watch-action.html","searchKeys":["WatchAction","fun WatchAction()","se.gustavkarlsson.conveyor.actions.WatchAction.WatchAction"]},{"name":"interface Action<State>","description":"se.gustavkarlsson.conveyor.Action","location":"core/core/se.gustavkarlsson.conveyor/-action/index.html","searchKeys":["Action","interface Action<State>","se.gustavkarlsson.conveyor.Action"]},{"name":"interface ActionIssuer<State>","description":"se.gustavkarlsson.conveyor.ActionIssuer","location":"core/core/se.gustavkarlsson.conveyor/-action-issuer/index.html","searchKeys":["ActionIssuer","interface ActionIssuer<State>","se.gustavkarlsson.conveyor.ActionIssuer"]},{"name":"interface AtomicStateFlow<State> : StateFlow<State> , MutableSharedFlow<State> ","description":"se.gustavkarlsson.conveyor.AtomicStateFlow","location":"core/core/se.gustavkarlsson.conveyor/-atomic-state-flow/index.html","searchKeys":["AtomicStateFlow","interface AtomicStateFlow<State> : StateFlow<State> , MutableSharedFlow<State> ","se.gustavkarlsson.conveyor.AtomicStateFlow"]},{"name":"interface Plugin<State>","description":"se.gustavkarlsson.conveyor.Plugin","location":"core/core/se.gustavkarlsson.conveyor/-plugin/index.html","searchKeys":["Plugin","interface Plugin<State>","se.gustavkarlsson.conveyor.Plugin"]},{"name":"interface Store<State> : ActionIssuer<State> ","description":"se.gustavkarlsson.conveyor.Store","location":"core/core/se.gustavkarlsson.conveyor/-store/index.html","searchKeys":["Store","interface Store<State> : ActionIssuer<State> ","se.gustavkarlsson.conveyor.Store"]},{"name":"open fun addStartActions(): Iterable<Action<State>>","description":"se.gustavkarlsson.conveyor.Plugin.addStartActions","location":"core/core/se.gustavkarlsson.conveyor/-plugin/add-start-actions.html","searchKeys":["addStartActions","open fun addStartActions(): Iterable<Action<State>>","se.gustavkarlsson.conveyor.Plugin.addStartActions"]},{"name":"open fun overrideInitialState(initialState: State): State","description":"se.gustavkarlsson.conveyor.Plugin.overrideInitialState","location":"core/core/se.gustavkarlsson.conveyor/-plugin/override-initial-state.html","searchKeys":["overrideInitialState","open fun overrideInitialState(initialState: State): State","se.gustavkarlsson.conveyor.Plugin.overrideInitialState"]},{"name":"open fun transformActions(actions: Flow<Action<State>>): Flow<Action<State>>","description":"se.gustavkarlsson.conveyor.Plugin.transformActions","location":"core/core/se.gustavkarlsson.conveyor/-plugin/transform-actions.html","searchKeys":["transformActions","open fun transformActions(actions: Flow<Action<State>>): Flow<Action<State>>","se.gustavkarlsson.conveyor.Plugin.transformActions"]},{"name":"open fun transformStates(states: Flow<State>): Flow<State>","description":"se.gustavkarlsson.conveyor.Plugin.transformStates","location":"core/core/se.gustavkarlsson.conveyor/-plugin/transform-states.html","searchKeys":["transformStates","open fun transformStates(states: Flow<State>): Flow<State>","se.gustavkarlsson.conveyor.Plugin.transformStates"]},{"name":"open override fun resetReplayCache()","description":"se.gustavkarlsson.conveyor.AtomicStateFlow.resetReplayCache","location":"core/core/se.gustavkarlsson.conveyor/-atomic-state-flow/reset-replay-cache.html","searchKeys":["resetReplayCache","open override fun resetReplayCache()","se.gustavkarlsson.conveyor.AtomicStateFlow.resetReplayCache"]},{"name":"open override fun tryEmit(value: T): Boolean","description":"se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.tryEmit","location":"core/core/se.gustavkarlsson.conveyor.internal/-stateful-mutable-shared-flow/try-emit.html","searchKeys":["tryEmit","open override fun tryEmit(value: T): Boolean","se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.tryEmit"]},{"name":"open override val value: T","description":"se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.value","location":"core/core/se.gustavkarlsson.conveyor.internal/-stateful-mutable-shared-flow/value.html","searchKeys":["value","open override val value: T","se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.value"]},{"name":"open suspend override fun emit(value: T)","description":"se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.emit","location":"core/core/se.gustavkarlsson.conveyor.internal/-stateful-mutable-shared-flow/emit.html","searchKeys":["emit","open suspend override fun emit(value: T)","se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.emit"]},{"name":"suspend override fun execute(stateFlow: AtomicStateFlow<State>)","description":"se.gustavkarlsson.conveyor.actions.LiveAction.execute","location":"core/core/se.gustavkarlsson.conveyor.actions/-live-action/execute.html","searchKeys":["execute","suspend override fun execute(stateFlow: AtomicStateFlow<State>)","se.gustavkarlsson.conveyor.actions.LiveAction.execute"]},{"name":"suspend override fun execute(stateFlow: AtomicStateFlow<State>)","description":"se.gustavkarlsson.conveyor.actions.WatchAction.execute","location":"core/core/se.gustavkarlsson.conveyor.actions/-watch-action/execute.html","searchKeys":["execute","suspend override fun execute(stateFlow: AtomicStateFlow<State>)","se.gustavkarlsson.conveyor.actions.WatchAction.execute"]},{"name":"val cancellationReason: Throwable?","description":"se.gustavkarlsson.conveyor.StoreStoppedException.cancellationReason","location":"core/core/se.gustavkarlsson.conveyor/-store-stopped-exception/cancellation-reason.html","searchKeys":["cancellationReason","val cancellationReason: Throwable?","se.gustavkarlsson.conveyor.StoreStoppedException.cancellationReason"]},{"name":"class TestAtomicStateFlow<State> : StateFlow<State> , AtomicStateFlow<State> ","description":"se.gustavkarlsson.conveyor.test.TestAtomicStateFlow","location":"test/test/se.gustavkarlsson.conveyor.test/-test-atomic-state-flow/index.html","searchKeys":["TestAtomicStateFlow","class TestAtomicStateFlow<State> : StateFlow<State> , AtomicStateFlow<State> ","se.gustavkarlsson.conveyor.test.TestAtomicStateFlow"]},{"name":"fun <State> TestAtomicStateFlow(initialValue: State)","description":"se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.TestAtomicStateFlow","location":"test/test/se.gustavkarlsson.conveyor.test/-test-atomic-state-flow/-test-atomic-state-flow.html","searchKeys":["TestAtomicStateFlow","fun <State> TestAtomicStateFlow(initialValue: State)","se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.TestAtomicStateFlow"]},{"name":"open override fun tryEmit(value: State): Boolean","description":"se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.tryEmit","location":"test/test/se.gustavkarlsson.conveyor.test/-test-atomic-state-flow/try-emit.html","searchKeys":["tryEmit","open override fun tryEmit(value: State): Boolean","se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.tryEmit"]},{"name":"open override val storeSubscriberCount: MutableStateFlow<Int>","description":"se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.storeSubscriberCount","location":"test/test/se.gustavkarlsson.conveyor.test/-test-atomic-state-flow/store-subscriber-count.html","searchKeys":["storeSubscriberCount","open override val storeSubscriberCount: MutableStateFlow<Int>","se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.storeSubscriberCount"]},{"name":"open override val subscriptionCount: StateFlow<Int>","description":"se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.subscriptionCount","location":"test/test/se.gustavkarlsson.conveyor.test/-test-atomic-state-flow/subscription-count.html","searchKeys":["subscriptionCount","open override val subscriptionCount: StateFlow<Int>","se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.subscriptionCount"]},{"name":"open suspend override fun emit(value: State)","description":"se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.emit","location":"test/test/se.gustavkarlsson.conveyor.test/-test-atomic-state-flow/emit.html","searchKeys":["emit","open suspend override fun emit(value: State)","se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.emit"]},{"name":"open suspend override fun update(block: State.() -> State): State","description":"se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.update","location":"test/test/se.gustavkarlsson.conveyor.test/-test-atomic-state-flow/update.html","searchKeys":["update","open suspend override fun update(block: State.() -> State): State","se.gustavkarlsson.conveyor.test.TestAtomicStateFlow.update"]}]