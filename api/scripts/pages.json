[{"name":"abstract class LiveAction<State> : Action<State> ","description":"se.gustavkarlsson.conveyor.actions.LiveAction","location":"core/se.gustavkarlsson.conveyor.actions/-live-action/index.html","searchKeys":["LiveAction","abstract class LiveAction<State> : Action<State> ","se.gustavkarlsson.conveyor.actions.LiveAction"]},{"name":"abstract class WatchAction<State> : Action<State> ","description":"se.gustavkarlsson.conveyor.actions.WatchAction","location":"core/se.gustavkarlsson.conveyor.actions/-watch-action/index.html","searchKeys":["WatchAction","abstract class WatchAction<State> : Action<State> ","se.gustavkarlsson.conveyor.actions.WatchAction"]},{"name":"abstract fun issue(action: Action<State>)","description":"se.gustavkarlsson.conveyor.ActionIssuer.issue","location":"core/se.gustavkarlsson.conveyor/-action-issuer/issue.html","searchKeys":["issue","abstract fun issue(action: Action<State>)","se.gustavkarlsson.conveyor.ActionIssuer.issue"]},{"name":"abstract suspend fun execute(storeFlow: StoreFlow<State>)","description":"se.gustavkarlsson.conveyor.Action.execute","location":"core/se.gustavkarlsson.conveyor/-action/execute.html","searchKeys":["execute","abstract suspend fun execute(storeFlow: StoreFlow<State>)","se.gustavkarlsson.conveyor.Action.execute"]},{"name":"abstract suspend fun getAndUpdate(block: (State) -> State): State","description":"se.gustavkarlsson.conveyor.StoreFlow.getAndUpdate","location":"core/se.gustavkarlsson.conveyor/-store-flow/get-and-update.html","searchKeys":["getAndUpdate","abstract suspend fun getAndUpdate(block: (State) -> State): State","se.gustavkarlsson.conveyor.StoreFlow.getAndUpdate"]},{"name":"abstract suspend fun run(): Nothing","description":"se.gustavkarlsson.conveyor.Store.run","location":"core/se.gustavkarlsson.conveyor/-store/run.html","searchKeys":["run","abstract suspend fun run(): Nothing","se.gustavkarlsson.conveyor.Store.run"]},{"name":"abstract suspend fun update(block: (State) -> State)","description":"se.gustavkarlsson.conveyor.StoreFlow.update","location":"core/se.gustavkarlsson.conveyor/-store-flow/update.html","searchKeys":["update","abstract suspend fun update(block: (State) -> State)","se.gustavkarlsson.conveyor.StoreFlow.update"]},{"name":"abstract suspend fun updateAndGet(block: (State) -> State): State","description":"se.gustavkarlsson.conveyor.StoreFlow.updateAndGet","location":"core/se.gustavkarlsson.conveyor/-store-flow/update-and-get.html","searchKeys":["updateAndGet","abstract suspend fun updateAndGet(block: (State) -> State): State","se.gustavkarlsson.conveyor.StoreFlow.updateAndGet"]},{"name":"abstract val state: StateFlow<State>","description":"se.gustavkarlsson.conveyor.Store.state","location":"core/se.gustavkarlsson.conveyor/-store/state.html","searchKeys":["state","abstract val state: StateFlow<State>","se.gustavkarlsson.conveyor.Store.state"]},{"name":"abstract val storeSubscriberCount: StateFlow<Int>","description":"se.gustavkarlsson.conveyor.StoreFlow.storeSubscriberCount","location":"core/se.gustavkarlsson.conveyor/-store-flow/store-subscriber-count.html","searchKeys":["storeSubscriberCount","abstract val storeSubscriberCount: StateFlow<Int>","se.gustavkarlsson.conveyor.StoreFlow.storeSubscriberCount"]},{"name":"annotation class InternalConveyorApi","description":"se.gustavkarlsson.conveyor.InternalConveyorApi","location":"core/se.gustavkarlsson.conveyor/-internal-conveyor-api/index.html","searchKeys":["InternalConveyorApi","annotation class InternalConveyorApi","se.gustavkarlsson.conveyor.InternalConveyorApi"]},{"name":"class StateUpdateException : IllegalStateException","description":"se.gustavkarlsson.conveyor.StateUpdateException","location":"core/se.gustavkarlsson.conveyor/-state-update-exception/index.html","searchKeys":["StateUpdateException","class StateUpdateException : IllegalStateException","se.gustavkarlsson.conveyor.StateUpdateException"]},{"name":"class StatefulMutableSharedFlow<T> : MutableSharedFlow<T> , StateFlow<T> ","description":"se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow","location":"core/se.gustavkarlsson.conveyor.internal/-stateful-mutable-shared-flow/index.html","searchKeys":["StatefulMutableSharedFlow","class StatefulMutableSharedFlow<T> : MutableSharedFlow<T> , StateFlow<T> ","se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow"]},{"name":"class StoreAlreadyStartedException : IllegalStateException","description":"se.gustavkarlsson.conveyor.StoreAlreadyStartedException","location":"core/se.gustavkarlsson.conveyor/-store-already-started-exception/index.html","searchKeys":["StoreAlreadyStartedException","class StoreAlreadyStartedException : IllegalStateException","se.gustavkarlsson.conveyor.StoreAlreadyStartedException"]},{"name":"class StoreNotYetStartedException : IllegalStateException","description":"se.gustavkarlsson.conveyor.StoreNotYetStartedException","location":"core/se.gustavkarlsson.conveyor/-store-not-yet-started-exception/index.html","searchKeys":["StoreNotYetStartedException","class StoreNotYetStartedException : IllegalStateException","se.gustavkarlsson.conveyor.StoreNotYetStartedException"]},{"name":"class StoreStoppedException : IllegalStateException","description":"se.gustavkarlsson.conveyor.StoreStoppedException","location":"core/se.gustavkarlsson.conveyor/-store-stopped-exception/index.html","searchKeys":["StoreStoppedException","class StoreStoppedException : IllegalStateException","se.gustavkarlsson.conveyor.StoreStoppedException"]},{"name":"fun <State> Action(block: suspend (storeFlow: StoreFlow<State>) -> Unit): Action<State>","description":"se.gustavkarlsson.conveyor.Action","location":"core/se.gustavkarlsson.conveyor/-action.html","searchKeys":["Action","fun <State> Action(block: suspend (storeFlow: StoreFlow<State>) -> Unit): Action<State>","se.gustavkarlsson.conveyor.Action"]},{"name":"fun <State> ActionIssuer<State>.issue(block: suspend (storeFlow: StoreFlow<State>) -> Unit)","description":"se.gustavkarlsson.conveyor.issue","location":"core/se.gustavkarlsson.conveyor/issue.html","searchKeys":["issue","fun <State> ActionIssuer<State>.issue(block: suspend (storeFlow: StoreFlow<State>) -> Unit)","se.gustavkarlsson.conveyor.issue"]},{"name":"fun <State> Store(initialState: State, startActions: Iterable<Action<State>> = emptyList(), plugins: Iterable<Plugin<State>> = emptyList()): Store<State>","description":"se.gustavkarlsson.conveyor.Store","location":"core/se.gustavkarlsson.conveyor/-store.html","searchKeys":["Store","fun <State> Store(initialState: State, startActions: Iterable<Action<State>> = emptyList(), plugins: Iterable<Plugin<State>> = emptyList()): Store<State>","se.gustavkarlsson.conveyor.Store"]},{"name":"fun <T> StatefulMutableSharedFlow(initialValue: T)","description":"se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.StatefulMutableSharedFlow","location":"core/se.gustavkarlsson.conveyor.internal/-stateful-mutable-shared-flow/-stateful-mutable-shared-flow.html","searchKeys":["StatefulMutableSharedFlow","fun <T> StatefulMutableSharedFlow(initialValue: T)","se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.StatefulMutableSharedFlow"]},{"name":"fun InternalConveyorApi()","description":"se.gustavkarlsson.conveyor.InternalConveyorApi.InternalConveyorApi","location":"core/se.gustavkarlsson.conveyor/-internal-conveyor-api/-internal-conveyor-api.html","searchKeys":["InternalConveyorApi","fun InternalConveyorApi()","se.gustavkarlsson.conveyor.InternalConveyorApi.InternalConveyorApi"]},{"name":"fun LiveAction()","description":"se.gustavkarlsson.conveyor.actions.LiveAction.LiveAction","location":"core/se.gustavkarlsson.conveyor.actions/-live-action/-live-action.html","searchKeys":["LiveAction","fun LiveAction()","se.gustavkarlsson.conveyor.actions.LiveAction.LiveAction"]},{"name":"fun WatchAction()","description":"se.gustavkarlsson.conveyor.actions.WatchAction.WatchAction","location":"core/se.gustavkarlsson.conveyor.actions/-watch-action/-watch-action.html","searchKeys":["WatchAction","fun WatchAction()","se.gustavkarlsson.conveyor.actions.WatchAction.WatchAction"]},{"name":"interface Action<State>","description":"se.gustavkarlsson.conveyor.Action","location":"core/se.gustavkarlsson.conveyor/-action/index.html","searchKeys":["Action","interface Action<State>","se.gustavkarlsson.conveyor.Action"]},{"name":"interface ActionIssuer<State>","description":"se.gustavkarlsson.conveyor.ActionIssuer","location":"core/se.gustavkarlsson.conveyor/-action-issuer/index.html","searchKeys":["ActionIssuer","interface ActionIssuer<State>","se.gustavkarlsson.conveyor.ActionIssuer"]},{"name":"interface Plugin<State>","description":"se.gustavkarlsson.conveyor.Plugin","location":"core/se.gustavkarlsson.conveyor/-plugin/index.html","searchKeys":["Plugin","interface Plugin<State>","se.gustavkarlsson.conveyor.Plugin"]},{"name":"interface Store<State> : ActionIssuer<State> ","description":"se.gustavkarlsson.conveyor.Store","location":"core/se.gustavkarlsson.conveyor/-store/index.html","searchKeys":["Store","interface Store<State> : ActionIssuer<State> ","se.gustavkarlsson.conveyor.Store"]},{"name":"interface StoreFlow<State> : StateFlow<State> , MutableSharedFlow<State> ","description":"se.gustavkarlsson.conveyor.StoreFlow","location":"core/se.gustavkarlsson.conveyor/-store-flow/index.html","searchKeys":["StoreFlow","interface StoreFlow<State> : StateFlow<State> , MutableSharedFlow<State> ","se.gustavkarlsson.conveyor.StoreFlow"]},{"name":"open fun addStartActions(): Iterable<Action<State>>","description":"se.gustavkarlsson.conveyor.Plugin.addStartActions","location":"core/se.gustavkarlsson.conveyor/-plugin/add-start-actions.html","searchKeys":["addStartActions","open fun addStartActions(): Iterable<Action<State>>","se.gustavkarlsson.conveyor.Plugin.addStartActions"]},{"name":"open fun overrideInitialState(initialState: State): State","description":"se.gustavkarlsson.conveyor.Plugin.overrideInitialState","location":"core/se.gustavkarlsson.conveyor/-plugin/override-initial-state.html","searchKeys":["overrideInitialState","open fun overrideInitialState(initialState: State): State","se.gustavkarlsson.conveyor.Plugin.overrideInitialState"]},{"name":"open fun transformActions(actions: Flow<Action<State>>): Flow<Action<State>>","description":"se.gustavkarlsson.conveyor.Plugin.transformActions","location":"core/se.gustavkarlsson.conveyor/-plugin/transform-actions.html","searchKeys":["transformActions","open fun transformActions(actions: Flow<Action<State>>): Flow<Action<State>>","se.gustavkarlsson.conveyor.Plugin.transformActions"]},{"name":"open fun transformStates(states: Flow<State>): Flow<State>","description":"se.gustavkarlsson.conveyor.Plugin.transformStates","location":"core/se.gustavkarlsson.conveyor/-plugin/transform-states.html","searchKeys":["transformStates","open fun transformStates(states: Flow<State>): Flow<State>","se.gustavkarlsson.conveyor.Plugin.transformStates"]},{"name":"open override fun resetReplayCache()","description":"se.gustavkarlsson.conveyor.StoreFlow.resetReplayCache","location":"core/se.gustavkarlsson.conveyor/-store-flow/reset-replay-cache.html","searchKeys":["resetReplayCache","open override fun resetReplayCache()","se.gustavkarlsson.conveyor.StoreFlow.resetReplayCache"]},{"name":"open override fun tryEmit(value: T): Boolean","description":"se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.tryEmit","location":"core/se.gustavkarlsson.conveyor.internal/-stateful-mutable-shared-flow/try-emit.html","searchKeys":["tryEmit","open override fun tryEmit(value: T): Boolean","se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.tryEmit"]},{"name":"open override val cause: Throwable","description":"se.gustavkarlsson.conveyor.StateUpdateException.cause","location":"core/se.gustavkarlsson.conveyor/-state-update-exception/cause.html","searchKeys":["cause","open override val cause: Throwable","se.gustavkarlsson.conveyor.StateUpdateException.cause"]},{"name":"open override val message: String","description":"se.gustavkarlsson.conveyor.StateUpdateException.message","location":"core/se.gustavkarlsson.conveyor/-state-update-exception/message.html","searchKeys":["message","open override val message: String","se.gustavkarlsson.conveyor.StateUpdateException.message"]},{"name":"open override val message: String","description":"se.gustavkarlsson.conveyor.StoreAlreadyStartedException.message","location":"core/se.gustavkarlsson.conveyor/-store-already-started-exception/message.html","searchKeys":["message","open override val message: String","se.gustavkarlsson.conveyor.StoreAlreadyStartedException.message"]},{"name":"open override val message: String","description":"se.gustavkarlsson.conveyor.StoreNotYetStartedException.message","location":"core/se.gustavkarlsson.conveyor/-store-not-yet-started-exception/message.html","searchKeys":["message","open override val message: String","se.gustavkarlsson.conveyor.StoreNotYetStartedException.message"]},{"name":"open override val message: String","description":"se.gustavkarlsson.conveyor.StoreStoppedException.message","location":"core/se.gustavkarlsson.conveyor/-store-stopped-exception/message.html","searchKeys":["message","open override val message: String","se.gustavkarlsson.conveyor.StoreStoppedException.message"]},{"name":"open override val value: T","description":"se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.value","location":"core/se.gustavkarlsson.conveyor.internal/-stateful-mutable-shared-flow/value.html","searchKeys":["value","open override val value: T","se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.value"]},{"name":"open suspend override fun emit(value: T)","description":"se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.emit","location":"core/se.gustavkarlsson.conveyor.internal/-stateful-mutable-shared-flow/emit.html","searchKeys":["emit","open suspend override fun emit(value: T)","se.gustavkarlsson.conveyor.internal.StatefulMutableSharedFlow.emit"]},{"name":"suspend override fun execute(storeFlow: StoreFlow<State>)","description":"se.gustavkarlsson.conveyor.actions.LiveAction.execute","location":"core/se.gustavkarlsson.conveyor.actions/-live-action/execute.html","searchKeys":["execute","suspend override fun execute(storeFlow: StoreFlow<State>)","se.gustavkarlsson.conveyor.actions.LiveAction.execute"]},{"name":"suspend override fun execute(storeFlow: StoreFlow<State>)","description":"se.gustavkarlsson.conveyor.actions.WatchAction.execute","location":"core/se.gustavkarlsson.conveyor.actions/-watch-action/execute.html","searchKeys":["execute","suspend override fun execute(storeFlow: StoreFlow<State>)","se.gustavkarlsson.conveyor.actions.WatchAction.execute"]},{"name":"val cancellationReason: Throwable","description":"se.gustavkarlsson.conveyor.StoreStoppedException.cancellationReason","location":"core/se.gustavkarlsson.conveyor/-store-stopped-exception/cancellation-reason.html","searchKeys":["cancellationReason","val cancellationReason: Throwable","se.gustavkarlsson.conveyor.StoreStoppedException.cancellationReason"]},{"name":"val state: Any?","description":"se.gustavkarlsson.conveyor.StateUpdateException.state","location":"core/se.gustavkarlsson.conveyor/-state-update-exception/state.html","searchKeys":["state","val state: Any?","se.gustavkarlsson.conveyor.StateUpdateException.state"]},{"name":"class TestStoreFlow<State> : StateFlow<State> , StoreFlow<State> ","description":"se.gustavkarlsson.conveyor.test.TestStoreFlow","location":"test/se.gustavkarlsson.conveyor.test/-test-store-flow/index.html","searchKeys":["TestStoreFlow","class TestStoreFlow<State> : StateFlow<State> , StoreFlow<State> ","se.gustavkarlsson.conveyor.test.TestStoreFlow"]},{"name":"fun <State> TestStoreFlow(initialValue: State)","description":"se.gustavkarlsson.conveyor.test.TestStoreFlow.TestStoreFlow","location":"test/se.gustavkarlsson.conveyor.test/-test-store-flow/-test-store-flow.html","searchKeys":["TestStoreFlow","fun <State> TestStoreFlow(initialValue: State)","se.gustavkarlsson.conveyor.test.TestStoreFlow.TestStoreFlow"]},{"name":"open override fun tryEmit(value: State): Boolean","description":"se.gustavkarlsson.conveyor.test.TestStoreFlow.tryEmit","location":"test/se.gustavkarlsson.conveyor.test/-test-store-flow/try-emit.html","searchKeys":["tryEmit","open override fun tryEmit(value: State): Boolean","se.gustavkarlsson.conveyor.test.TestStoreFlow.tryEmit"]},{"name":"open override val storeSubscriberCount: MutableStateFlow<Int>","description":"se.gustavkarlsson.conveyor.test.TestStoreFlow.storeSubscriberCount","location":"test/se.gustavkarlsson.conveyor.test/-test-store-flow/store-subscriber-count.html","searchKeys":["storeSubscriberCount","open override val storeSubscriberCount: MutableStateFlow<Int>","se.gustavkarlsson.conveyor.test.TestStoreFlow.storeSubscriberCount"]},{"name":"open override val subscriptionCount: StateFlow<Int>","description":"se.gustavkarlsson.conveyor.test.TestStoreFlow.subscriptionCount","location":"test/se.gustavkarlsson.conveyor.test/-test-store-flow/subscription-count.html","searchKeys":["subscriptionCount","open override val subscriptionCount: StateFlow<Int>","se.gustavkarlsson.conveyor.test.TestStoreFlow.subscriptionCount"]},{"name":"open suspend override fun emit(value: State)","description":"se.gustavkarlsson.conveyor.test.TestStoreFlow.emit","location":"test/se.gustavkarlsson.conveyor.test/-test-store-flow/emit.html","searchKeys":["emit","open suspend override fun emit(value: State)","se.gustavkarlsson.conveyor.test.TestStoreFlow.emit"]},{"name":"open suspend override fun getAndUpdate(block: State.() -> State): State","description":"se.gustavkarlsson.conveyor.test.TestStoreFlow.getAndUpdate","location":"test/se.gustavkarlsson.conveyor.test/-test-store-flow/get-and-update.html","searchKeys":["getAndUpdate","open suspend override fun getAndUpdate(block: State.() -> State): State","se.gustavkarlsson.conveyor.test.TestStoreFlow.getAndUpdate"]},{"name":"open suspend override fun update(block: State.() -> State)","description":"se.gustavkarlsson.conveyor.test.TestStoreFlow.update","location":"test/se.gustavkarlsson.conveyor.test/-test-store-flow/update.html","searchKeys":["update","open suspend override fun update(block: State.() -> State)","se.gustavkarlsson.conveyor.test.TestStoreFlow.update"]},{"name":"open suspend override fun updateAndGet(block: State.() -> State): State","description":"se.gustavkarlsson.conveyor.test.TestStoreFlow.updateAndGet","location":"test/se.gustavkarlsson.conveyor.test/-test-store-flow/update-and-get.html","searchKeys":["updateAndGet","open suspend override fun updateAndGet(block: State.() -> State): State","se.gustavkarlsson.conveyor.test.TestStoreFlow.updateAndGet"]}]