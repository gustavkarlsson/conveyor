[{"name":"abstract fun issue(action: Action<State>)","description":"se.gustavkarlsson.conveyor.ActionIssuer.issue","location":"core/core/se.gustavkarlsson.conveyor/-action-issuer/issue.html","searchKeys":["issue","abstract fun issue(action: Action<State>)","se.gustavkarlsson.conveyor.ActionIssuer.issue"]},{"name":"abstract fun start(scope: CoroutineScope): Job","description":"se.gustavkarlsson.conveyor.Store.start","location":"core/core/se.gustavkarlsson.conveyor/-store/start.html","searchKeys":["start","abstract fun start(scope: CoroutineScope): Job","se.gustavkarlsson.conveyor.Store.start"]},{"name":"abstract suspend fun execute(stateFlow: UpdatableStateFlow<State>)","description":"se.gustavkarlsson.conveyor.Action.execute","location":"core/core/se.gustavkarlsson.conveyor/-action/execute.html","searchKeys":["execute","abstract suspend fun execute(stateFlow: UpdatableStateFlow<State>)","se.gustavkarlsson.conveyor.Action.execute"]},{"name":"abstract suspend fun update(block: State.() -> State): State","description":"se.gustavkarlsson.conveyor.UpdatableStateFlow.update","location":"core/core/se.gustavkarlsson.conveyor/-updatable-state-flow/update.html","searchKeys":["update","abstract suspend fun update(block: State.() -> State): State","se.gustavkarlsson.conveyor.UpdatableStateFlow.update"]},{"name":"abstract val job: Job?","description":"se.gustavkarlsson.conveyor.Store.job","location":"core/core/se.gustavkarlsson.conveyor/-store/job.html","searchKeys":["job","abstract val job: Job?","se.gustavkarlsson.conveyor.Store.job"]},{"name":"abstract val state: StateFlow<State>","description":"se.gustavkarlsson.conveyor.Store.state","location":"core/core/se.gustavkarlsson.conveyor/-store/state.html","searchKeys":["state","abstract val state: StateFlow<State>","se.gustavkarlsson.conveyor.Store.state"]},{"name":"abstract val storeSubscriberCount: StateFlow<Int>","description":"se.gustavkarlsson.conveyor.UpdatableStateFlow.storeSubscriberCount","location":"core/core/se.gustavkarlsson.conveyor/-updatable-state-flow/store-subscriber-count.html","searchKeys":["storeSubscriberCount","abstract val storeSubscriberCount: StateFlow<Int>","se.gustavkarlsson.conveyor.UpdatableStateFlow.storeSubscriberCount"]},{"name":"class StoreAlreadyStartedException : IllegalStateException","description":"se.gustavkarlsson.conveyor.StoreAlreadyStartedException","location":"core/core/se.gustavkarlsson.conveyor/-store-already-started-exception/index.html","searchKeys":["StoreAlreadyStartedException","class StoreAlreadyStartedException : IllegalStateException","se.gustavkarlsson.conveyor.StoreAlreadyStartedException"]},{"name":"class StoreNotYetStartedException : IllegalStateException","description":"se.gustavkarlsson.conveyor.StoreNotYetStartedException","location":"core/core/se.gustavkarlsson.conveyor/-store-not-yet-started-exception/index.html","searchKeys":["StoreNotYetStartedException","class StoreNotYetStartedException : IllegalStateException","se.gustavkarlsson.conveyor.StoreNotYetStartedException"]},{"name":"class StoreStoppedException(cancellationReason: Throwable?) : IllegalStateException","description":"se.gustavkarlsson.conveyor.StoreStoppedException","location":"core/core/se.gustavkarlsson.conveyor/-store-stopped-exception/index.html","searchKeys":["StoreStoppedException","class StoreStoppedException(cancellationReason: Throwable?) : IllegalStateException","se.gustavkarlsson.conveyor.StoreStoppedException"]},{"name":"fun <State> Action(block: suspend (stateFlow: UpdatableStateFlow<State>) -> Unit): Action<State>","description":"se.gustavkarlsson.conveyor.Action","location":"core/core/se.gustavkarlsson.conveyor/-action.html","searchKeys":["Action","fun <State> Action(block: suspend (stateFlow: UpdatableStateFlow<State>) -> Unit): Action<State>","se.gustavkarlsson.conveyor.Action"]},{"name":"fun <State> ActionIssuer<State>.issue(block: suspend (state: UpdatableStateFlow<State>) -> Unit)","description":"se.gustavkarlsson.conveyor.issue","location":"core/core/se.gustavkarlsson.conveyor/issue.html","searchKeys":["issue","fun <State> ActionIssuer<State>.issue(block: suspend (state: UpdatableStateFlow<State>) -> Unit)","se.gustavkarlsson.conveyor.issue"]},{"name":"fun <State> Store(initialState: State, startActions: Iterable<Action<State>> = emptyList(), plugins: Iterable<Plugin<State>> = emptyList()): Store<State>","description":"se.gustavkarlsson.conveyor.Store","location":"core/core/se.gustavkarlsson.conveyor/-store.html","searchKeys":["Store","fun <State> Store(initialState: State, startActions: Iterable<Action<State>> = emptyList(), plugins: Iterable<Plugin<State>> = emptyList()): Store<State>","se.gustavkarlsson.conveyor.Store"]},{"name":"fun StoreAlreadyStartedException()","description":"se.gustavkarlsson.conveyor.StoreAlreadyStartedException.StoreAlreadyStartedException","location":"core/core/se.gustavkarlsson.conveyor/-store-already-started-exception/-store-already-started-exception.html","searchKeys":["StoreAlreadyStartedException","fun StoreAlreadyStartedException()","se.gustavkarlsson.conveyor.StoreAlreadyStartedException.StoreAlreadyStartedException"]},{"name":"fun StoreNotYetStartedException()","description":"se.gustavkarlsson.conveyor.StoreNotYetStartedException.StoreNotYetStartedException","location":"core/core/se.gustavkarlsson.conveyor/-store-not-yet-started-exception/-store-not-yet-started-exception.html","searchKeys":["StoreNotYetStartedException","fun StoreNotYetStartedException()","se.gustavkarlsson.conveyor.StoreNotYetStartedException.StoreNotYetStartedException"]},{"name":"fun StoreStoppedException(cancellationReason: Throwable?)","description":"se.gustavkarlsson.conveyor.StoreStoppedException.StoreStoppedException","location":"core/core/se.gustavkarlsson.conveyor/-store-stopped-exception/-store-stopped-exception.html","searchKeys":["StoreStoppedException","fun StoreStoppedException(cancellationReason: Throwable?)","se.gustavkarlsson.conveyor.StoreStoppedException.StoreStoppedException"]},{"name":"interface Action<State>","description":"se.gustavkarlsson.conveyor.Action","location":"core/core/se.gustavkarlsson.conveyor/-action/index.html","searchKeys":["Action","interface Action<State>","se.gustavkarlsson.conveyor.Action"]},{"name":"interface ActionIssuer<State>","description":"se.gustavkarlsson.conveyor.ActionIssuer","location":"core/core/se.gustavkarlsson.conveyor/-action-issuer/index.html","searchKeys":["ActionIssuer","interface ActionIssuer<State>","se.gustavkarlsson.conveyor.ActionIssuer"]},{"name":"interface Plugin<State>","description":"se.gustavkarlsson.conveyor.Plugin","location":"core/core/se.gustavkarlsson.conveyor/-plugin/index.html","searchKeys":["Plugin","interface Plugin<State>","se.gustavkarlsson.conveyor.Plugin"]},{"name":"interface Store<State> : ActionIssuer<State> ","description":"se.gustavkarlsson.conveyor.Store","location":"core/core/se.gustavkarlsson.conveyor/-store/index.html","searchKeys":["Store","interface Store<State> : ActionIssuer<State> ","se.gustavkarlsson.conveyor.Store"]},{"name":"interface UpdatableStateFlow<State> : StateFlow<State> , MutableSharedFlow<State> ","description":"se.gustavkarlsson.conveyor.UpdatableStateFlow","location":"core/core/se.gustavkarlsson.conveyor/-updatable-state-flow/index.html","searchKeys":["UpdatableStateFlow","interface UpdatableStateFlow<State> : StateFlow<State> , MutableSharedFlow<State> ","se.gustavkarlsson.conveyor.UpdatableStateFlow"]},{"name":"open fun addStartActions(): Iterable<Action<State>>","description":"se.gustavkarlsson.conveyor.Plugin.addStartActions","location":"core/core/se.gustavkarlsson.conveyor/-plugin/add-start-actions.html","searchKeys":["addStartActions","open fun addStartActions(): Iterable<Action<State>>","se.gustavkarlsson.conveyor.Plugin.addStartActions"]},{"name":"open fun overrideInitialState(initialState: State): State","description":"se.gustavkarlsson.conveyor.Plugin.overrideInitialState","location":"core/core/se.gustavkarlsson.conveyor/-plugin/override-initial-state.html","searchKeys":["overrideInitialState","open fun overrideInitialState(initialState: State): State","se.gustavkarlsson.conveyor.Plugin.overrideInitialState"]},{"name":"open fun transformActions(actions: Flow<Action<State>>): Flow<Action<State>>","description":"se.gustavkarlsson.conveyor.Plugin.transformActions","location":"core/core/se.gustavkarlsson.conveyor/-plugin/transform-actions.html","searchKeys":["transformActions","open fun transformActions(actions: Flow<Action<State>>): Flow<Action<State>>","se.gustavkarlsson.conveyor.Plugin.transformActions"]},{"name":"open fun transformStates(states: Flow<State>): Flow<State>","description":"se.gustavkarlsson.conveyor.Plugin.transformStates","location":"core/core/se.gustavkarlsson.conveyor/-plugin/transform-states.html","searchKeys":["transformStates","open fun transformStates(states: Flow<State>): Flow<State>","se.gustavkarlsson.conveyor.Plugin.transformStates"]},{"name":"open override fun resetReplayCache()","description":"se.gustavkarlsson.conveyor.UpdatableStateFlow.resetReplayCache","location":"core/core/se.gustavkarlsson.conveyor/-updatable-state-flow/reset-replay-cache.html","searchKeys":["resetReplayCache","open override fun resetReplayCache()","se.gustavkarlsson.conveyor.UpdatableStateFlow.resetReplayCache"]},{"name":"val cancellationReason: Throwable?","description":"se.gustavkarlsson.conveyor.StoreStoppedException.cancellationReason","location":"core/core/se.gustavkarlsson.conveyor/-store-stopped-exception/cancellation-reason.html","searchKeys":["cancellationReason","val cancellationReason: Throwable?","se.gustavkarlsson.conveyor.StoreStoppedException.cancellationReason"]},{"name":"abstract class CompletableAction<State : Any> : Action<State> ","description":"se.gustavkarlsson.conveyor.rx2.CompletableAction","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-completable-action/index.html","searchKeys":["CompletableAction","abstract class CompletableAction<State : Any> : Action<State> ","se.gustavkarlsson.conveyor.rx2.CompletableAction"]},{"name":"abstract class StateFlowable<State : Any> : Flowable<State> ","description":"se.gustavkarlsson.conveyor.rx2.StateFlowable","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-state-flowable/index.html","searchKeys":["StateFlowable","abstract class StateFlowable<State : Any> : Flowable<State> ","se.gustavkarlsson.conveyor.rx2.StateFlowable"]},{"name":"abstract class UpdatableStateFlowable<State : Any> : StateFlowable<State> ","description":"se.gustavkarlsson.conveyor.rx2.UpdatableStateFlowable","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-updatable-state-flowable/index.html","searchKeys":["UpdatableStateFlowable","abstract class UpdatableStateFlowable<State : Any> : StateFlowable<State> ","se.gustavkarlsson.conveyor.rx2.UpdatableStateFlowable"]},{"name":"abstract fun start(scope: CoroutineScope = GlobalScope): Disposable","description":"se.gustavkarlsson.conveyor.rx2.RxStore.start","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-rx-store/start.html","searchKeys":["start","abstract fun start(scope: CoroutineScope = GlobalScope): Disposable","se.gustavkarlsson.conveyor.rx2.RxStore.start"]},{"name":"abstract fun update(block: State.() -> State): Single<State>","description":"se.gustavkarlsson.conveyor.rx2.UpdatableStateFlowable.update","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-updatable-state-flowable/update.html","searchKeys":["update","abstract fun update(block: State.() -> State): Single<State>","se.gustavkarlsson.conveyor.rx2.UpdatableStateFlowable.update"]},{"name":"abstract fun updateBlocking(block: State.() -> State): State","description":"se.gustavkarlsson.conveyor.rx2.UpdatableStateFlowable.updateBlocking","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-updatable-state-flowable/update-blocking.html","searchKeys":["updateBlocking","abstract fun updateBlocking(block: State.() -> State): State","se.gustavkarlsson.conveyor.rx2.UpdatableStateFlowable.updateBlocking"]},{"name":"abstract val disposable: Disposable?","description":"se.gustavkarlsson.conveyor.rx2.RxStore.disposable","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-rx-store/disposable.html","searchKeys":["disposable","abstract val disposable: Disposable?","se.gustavkarlsson.conveyor.rx2.RxStore.disposable"]},{"name":"abstract val state: StateFlowable<State>","description":"se.gustavkarlsson.conveyor.rx2.RxStore.state","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-rx-store/state.html","searchKeys":["state","abstract val state: StateFlowable<State>","se.gustavkarlsson.conveyor.rx2.RxStore.state"]},{"name":"abstract val storeSubscriberCount: StateFlowable<Int>","description":"se.gustavkarlsson.conveyor.rx2.UpdatableStateFlowable.storeSubscriberCount","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-updatable-state-flowable/store-subscriber-count.html","searchKeys":["storeSubscriberCount","abstract val storeSubscriberCount: StateFlowable<Int>","se.gustavkarlsson.conveyor.rx2.UpdatableStateFlowable.storeSubscriberCount"]},{"name":"abstract val value: State","description":"se.gustavkarlsson.conveyor.rx2.StateFlowable.value","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-state-flowable/value.html","searchKeys":["value","abstract val value: State","se.gustavkarlsson.conveyor.rx2.StateFlowable.value"]},{"name":"fun <State : Any> ActionIssuer<State>.issue(block: (state: UpdatableStateFlowable<State>) -> Completable)","description":"se.gustavkarlsson.conveyor.rx2.issue","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/issue.html","searchKeys":["issue","fun <State : Any> ActionIssuer<State>.issue(block: (state: UpdatableStateFlowable<State>) -> Completable)","se.gustavkarlsson.conveyor.rx2.issue"]},{"name":"fun <State : Any> CompletableAction(block: (state: UpdatableStateFlowable<State>) -> Completable): CompletableAction<State>","description":"se.gustavkarlsson.conveyor.rx2.CompletableAction","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-completable-action.html","searchKeys":["CompletableAction","fun <State : Any> CompletableAction(block: (state: UpdatableStateFlowable<State>) -> Completable): CompletableAction<State>","se.gustavkarlsson.conveyor.rx2.CompletableAction"]},{"name":"fun <State : Any> Store<State>.asRxStore(): RxStore<State>","description":"se.gustavkarlsson.conveyor.rx2.asRxStore","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/as-rx-store.html","searchKeys":["asRxStore","fun <State : Any> Store<State>.asRxStore(): RxStore<State>","se.gustavkarlsson.conveyor.rx2.asRxStore"]},{"name":"fun CompletableAction()","description":"se.gustavkarlsson.conveyor.rx2.CompletableAction.CompletableAction","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-completable-action/-completable-action.html","searchKeys":["CompletableAction","fun CompletableAction()","se.gustavkarlsson.conveyor.rx2.CompletableAction.CompletableAction"]},{"name":"fun StateFlowable()","description":"se.gustavkarlsson.conveyor.rx2.StateFlowable.StateFlowable","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-state-flowable/-state-flowable.html","searchKeys":["StateFlowable","fun StateFlowable()","se.gustavkarlsson.conveyor.rx2.StateFlowable.StateFlowable"]},{"name":"fun UpdatableStateFlowable()","description":"se.gustavkarlsson.conveyor.rx2.UpdatableStateFlowable.UpdatableStateFlowable","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-updatable-state-flowable/-updatable-state-flowable.html","searchKeys":["UpdatableStateFlowable","fun UpdatableStateFlowable()","se.gustavkarlsson.conveyor.rx2.UpdatableStateFlowable.UpdatableStateFlowable"]},{"name":"interface RxStore<State : Any> : ActionIssuer<State> ","description":"se.gustavkarlsson.conveyor.rx2.RxStore","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-rx-store/index.html","searchKeys":["RxStore","interface RxStore<State : Any> : ActionIssuer<State> ","se.gustavkarlsson.conveyor.rx2.RxStore"]},{"name":"suspend override fun execute(stateFlow: UpdatableStateFlow<State>)","description":"se.gustavkarlsson.conveyor.rx2.CompletableAction.execute","location":"rx2/rx2/se.gustavkarlsson.conveyor.rx2/-completable-action/execute.html","searchKeys":["execute","suspend override fun execute(stateFlow: UpdatableStateFlow<State>)","se.gustavkarlsson.conveyor.rx2.CompletableAction.execute"]}]